#include "debugintefacedlg.h"
#include "ui_debugintefacedlg.h"

debugIntefaceDlg::debugIntefaceDlg(CQtProDB* db, CUtilSettings *settings, QWidget *parent) :
    QDialog(parent),
    ui(new Ui::debugIntefaceDlg)
{
    ui->setupUi(this);
    m_devDb = db;
    m_pSettinsObj = settings;
    //初始化对话框样式
    InitDialogStyle();
    //初始化导航栏
    InitNavigate();
    //初始化图形对象
    m_packPlot = new CPackCustomPlot(ui->wg_Curve_CustomPlot);
    m_packPlot->InitPlotParam(700);
    //初始化曲线界面控件
    InitDebugControl();
    //初始化参数设置界面内容值
    InitParamSetShow();

}

debugIntefaceDlg::~debugIntefaceDlg()
{
    delete ui;
}

/********************************************************
 *@Name:        InitNavigate
 *@Author:      HuaT
 *@Description: 初始化调试界面导航栏
 *@Param1:      无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2019-3-4
********************************************************/
void debugIntefaceDlg::InitNavigate()
{
    QStringList listNavigate;
    listNavigate<<"参数设置"<<"常规调试"<<"数据库操作"<<"曲线显示"<<"退出";
    for(int n=0; n<listNavigate.size(); n++){
        QListWidgetItem* item = new QListWidgetItem(listNavigate.at(n));
        item->setSizeHint(QSize(187,80));
        ui->lw_debug_Navigate->addItem(item);
    }
}

/********************************************************
 *@Name:        InitDialogStyle
 *@Author:      HuaT
 *@Description: 初始化对话框样式
 *@Param1:      无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2019-3-4
********************************************************/
void debugIntefaceDlg::InitDialogStyle()
{
    this->setWindowFlags(Qt::CustomizeWindowHint|Qt::FramelessWindowHint);
    QDesktopWidget* dw = qApp->desktop();
    this->move( (dw->width() - this->width())/2 , (dw->height() - this->height())/2);
}

/********************************************************
 *@Name:        InitDebugControl
 *@Author:      HuaT
 *@Description: 初始化调试界面控件状态
 *@Param1:      无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2019-3-4
********************************************************/
void debugIntefaceDlg::InitDebugControl()
{
    //初始化单选控件
    ui->rb_Curve_Overlay->setChecked(true);
    ui->rb_Curve_RawData->setChecked(true);
    //初始化表格控件
    InitResultTableWidget();
    //初始化日期控件
    QDate dt = QDate::currentDate();
    ui->de_Curve_StartTime->setDate(dt);
    ui->de_Curve_EndTime->setDate(dt);
    //编辑框数字键
    ui->le_Param_Amp->setProperty("flag","number");
    ui->le_Param_CalcMethod->setProperty("flag","number");
    ui->le_Param_Diluent->setProperty("flag","number");
    ui->le_Param_SampleSize->setProperty("flag","number");
    ui->le_Param_ScanStart->setProperty("flag","number");
    //参数设置数字键
    ui->le_Normal_DiluentAddOffset->setProperty("flag","number");
    ui->le_Normal_SampleAddOffset->setProperty("flag","number");

}

/*
 *
 * 初始化结果列表控件
 *
 */
void debugIntefaceDlg::InitResultTableWidget()
{
    QStringList listHeader;
    listHeader<<QObject::tr("编号")<<QObject::tr("面积1")<<QObject::tr("面积2")<<QObject::tr("比值")
              <<QObject::tr("结果")<<QObject::tr("计算方案")<<QObject::tr("扫描起始点")
              <<QObject::tr("质控峰长度")<<QObject::tr("放大倍数")<<QObject::tr("检测峰长度")
              <<QObject::tr("波峰位置1")<<QObject::tr("波峰位置1左")<<QObject::tr("波峰位置1右")
              <<QObject::tr("波峰位置2")<<QObject::tr("波峰位置2左")<<QObject::tr("波峰位置2右")
              <<QObject::tr("测试时间")<<QObject::tr("原始数据");
    ui->tw_Curve_ResultInfo->setColumnCount(listHeader.size());
    ui->tw_Curve_ResultInfo->setHorizontalHeaderLabels(listHeader);
    ui->tw_Curve_ResultInfo->setEditTriggers(QTableWidget::NoEditTriggers);
    ui->tw_Curve_ResultInfo->setSelectionBehavior(QTableWidget::SelectRows);
    //ui->tw_Curve_ResultInfo->setRowCount(7);
}

/*
 *
 * 读取参数界面内容到界面显示
 *
 */
void debugIntefaceDlg::InitParamSetShow()
{
    if(m_pSettinsObj->GetParam(DEBUGMODE) == "0"){
        ui->rb_Param_Close->setChecked(true);
    }else{
        ui->rb_Param_Open->setChecked(true);
    }
    QString strAmp = m_pSettinsObj->GetParam(AMPPARAM);
    ui->le_Param_Amp->setText(strAmp);
    ui->le_Param_CalcMethod->setText(m_pSettinsObj->GetParam(CALCMETHOD));
    ui->le_Param_Diluent->setText(m_pSettinsObj->GetParam(DILUENT));
    ui->le_Param_SampleSize->setText(m_pSettinsObj->GetParam(SAMPLESIZE));
    ui->le_Param_ScanStart->setText(m_pSettinsObj->GetParam(SCANSTART));
}

/*
 *
 * 导航项目更改事件
 *
 */
void debugIntefaceDlg::on_lw_debug_Navigate_currentRowChanged(int currentRow)
{
    if(currentRow == 4){
        this->close();
    }else{
        ui->stackedWidget->setCurrentIndex(currentRow);
    }
}

/*
 *
 *调试界面查询数据事件
 *
 */
void debugIntefaceDlg::on_pb_Curve_QueryData_clicked()
{
    ui->tw_Curve_ResultInfo->setRowCount(0);
    QString strStartDate = QString("%1 00:00:00").arg(ui->de_Curve_StartTime->date().toString("yyyy-MM-dd"));
    QString strEndDate = QString("%2 23:59:59").arg(ui->de_Curve_EndTime->date().toString("yyyy-MM-dd"));
    QString strSql;
    strSql = QString("select * from testinfo where testdate between '%1' and '%2' ")
             .arg(strStartDate).arg(strEndDate);
    QStringList strlistRe;
    strlistRe = m_devDb->ExecQuery(strSql);
    //qDebug()<<strlistRe;
    for(int n=0; n<strlistRe.size(); n+=19){
        InsertTestInfoToTab(strlistRe.at(n+1),strlistRe.at(n+2),strlistRe.at(n+3),strlistRe.at(n+4),
                            strlistRe.at(n+5),strlistRe.at(n+6),strlistRe.at(n+7),strlistRe.at(n+8),
                            strlistRe.at(n+9),strlistRe.at(n+10),strlistRe.at(n+11),strlistRe.at(n+12),
                            strlistRe.at(n+13),strlistRe.at(n+14),strlistRe.at(n+15),strlistRe.at(n+16),
                            strlistRe.at(n+17),strlistRe.at(n+18) );
    }
}

/*
 *
 *插入一条数据至测试信息表格
 *
 */
void debugIntefaceDlg::InsertTestInfoToTab(QString strNumber, QString strArea1, QString strArea2, QString strRatio,
                                           QString strResult, QString strCalcMethod,
                                           QString strScanStart,QString strQCBreadth,
                                           QString strCheckBreadth, QString strAmpParam,
                                           QString strCrestPos1, QString strCrestPosLeft1,
                                           QString strCrestPosRight1,QString strCrestPos2,
                                           QString strCrestPosLeft2, QString strCrestPosRight2,
                                           QString strTestDate,QString strRawData)
{
    int nRowCount = ui->tw_Curve_ResultInfo->rowCount();
    ui->tw_Curve_ResultInfo->insertRow(nRowCount);
    QTableWidgetItem* itemNumber = new QTableWidgetItem;
    itemNumber->setText(strNumber);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,0,itemNumber);

    QTableWidgetItem* itemArea1 = new QTableWidgetItem;
    itemArea1->setText(strArea1);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,1,itemArea1);

    QTableWidgetItem* itemArea2 = new QTableWidgetItem;
    itemArea2->setText(strArea2);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,2,itemArea2);

    QTableWidgetItem* itemRatio = new QTableWidgetItem;
    itemRatio->setText(strRatio);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,3,itemRatio);

    QTableWidgetItem* itemResult = new QTableWidgetItem;
    itemResult->setText(strResult);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,4,itemResult);

    QTableWidgetItem* itemCalcMethod = new QTableWidgetItem;
    itemCalcMethod->setText(strCalcMethod);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,5,itemCalcMethod);

    QTableWidgetItem* itemScanStart = new QTableWidgetItem;
    itemScanStart->setText(strScanStart);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,6,itemScanStart);

    QTableWidgetItem* itemQCBreadth = new QTableWidgetItem;
    itemQCBreadth->setText(strQCBreadth);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,7,itemQCBreadth);

    QTableWidgetItem* itemCheckBreadth = new QTableWidgetItem;
    itemCheckBreadth->setText(strCheckBreadth);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,8,itemCheckBreadth);

    QTableWidgetItem* itemAmpParam = new QTableWidgetItem;
    itemAmpParam->setText(strAmpParam);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,9,itemAmpParam);

    QTableWidgetItem* itemCrestPos1 = new QTableWidgetItem;
    itemCrestPos1->setText(strCrestPos1);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,10,itemCrestPos1);

    QTableWidgetItem* itemCrestPosLeft1 = new QTableWidgetItem;
    itemCrestPosLeft1->setText(strCrestPosLeft1);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,11,itemCrestPosLeft1);

    QTableWidgetItem* itemCrestPosRight1 = new QTableWidgetItem;
    itemCrestPosRight1->setText(strCrestPosRight1);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,12,itemCrestPosRight1);

    QTableWidgetItem* itemCrestPos2 = new QTableWidgetItem;
    itemCrestPos2->setText(strCrestPos2);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,13,itemCrestPos2);

    QTableWidgetItem* itemCrestPosLeft2 = new QTableWidgetItem;
    itemCrestPosLeft2->setText(strCrestPosLeft2);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,14,itemCrestPosLeft2);

    QTableWidgetItem* itemCrestPosRight2 = new QTableWidgetItem;
    itemCrestPosRight2->setText(strCrestPosRight2);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,15,itemCrestPosRight2);

    QTableWidgetItem* itemTestDate = new QTableWidgetItem;
    itemTestDate->setText(strTestDate);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,16,itemTestDate);

    QTableWidgetItem* itemRawData = new QTableWidgetItem;
    itemRawData->setText(strRawData);
    ui->tw_Curve_ResultInfo->setItem(nRowCount,17,itemRawData);
}

/*
 *
 *结果信息表选择行响应事件
 *
 */
void debugIntefaceDlg::on_tw_Curve_ResultInfo_cellPressed(int row, int column)
{
    if(row < 0){
        return;
    }
    QString strRawData = ui->tw_Curve_ResultInfo->item(row,17)->text();
    QByteArray byteRawData;
    for(int n=0; n<strRawData.size(); n+=2){
        bool re;
        byteRawData.append( strRawData.mid(n,2).toUShort(&re,16) );
    }
    //qDebug()<<byteRawData.size();
    bool bov = ui->rb_Curve_NoOverlay->isChecked();
    if(bov == true){
        m_packPlot->SetOverlay(false);
    }else{
        m_packPlot->SetOverlay(true);
    }
    QVector<double> vecData = ConvertGraphData(byteRawData);
    if(ui->rb_Curve_RawData->isChecked() == true){
        m_packPlot->DrawGraph(vecData);
    }else{
        low_passfilter(vecData);
        m_packPlot->DrawGraph(vecData);
    }

}

/*
 *
 *320个原始数据过滤
 *
 */
void debugIntefaceDlg::low_passfilter(QVector<double>& oldData)
{
    int i,k;
    double temp[320];
    double tempdata;
    //unsigned int nShow;
    for(k=0;k<4;k++)
    {
        for(i=0;i<320;i++){
            temp[i] = oldData.at(i);
        }
        for(i=6;i<(320-6);i++)
        {
            tempdata =temp[i-6]+temp[i-5]+temp[i-4]+temp[i-3]+temp[i-2]+temp[i-1]+temp[i]+temp[i+1]+temp[i+2]+temp[i+3]+temp[i+4]+temp[i+5]+temp[i+6];
            oldData[i] =  ceil(tempdata/13) ;
            //nShow = scanData[i];
            //qDebug()<<i<<":"<<nShow<<"  "<<"tempdata:"<<tempdata;
        }
    }
}

/*
 *
 *清除图形控件内容响应事件
 *
 */
void debugIntefaceDlg::on_pb_Curve_ClearCurve_clicked()
{
    m_packPlot->ClearGraph();
}

/*
 *
 *转换640个高低数据为320个点数据
 *
 */
QVector<double> debugIntefaceDlg::ConvertGraphData(QByteArray byteGraphData)
{
    QVector<double> vecData;
    for(int n=0; n<byteGraphData.size(); n+=2){
        vecData.append(byteGraphData.at(n) + byteGraphData.at(n+1)*256);
    }
    return vecData;
}

/*
 *
 *保存设定参数响应事件
 *
 */
void debugIntefaceDlg::on_pb_Param_SaveParam_clicked()
{
    if(ui->rb_Param_Close->isChecked() == true){
        m_pSettinsObj->SetParam(DEBUGMODE,"0");
    }else{
        m_pSettinsObj->SetParam(DEBUGMODE,"1");
    }

    m_pSettinsObj->SetParam(DILUENT,ui->le_Param_Diluent->text());
    m_pSettinsObj->SetParam(SAMPLESIZE,ui->le_Param_SampleSize->text());
    m_pSettinsObj->SetParam(SCANSTART,ui->le_Param_ScanStart->text());
    m_pSettinsObj->SetParam(CALCMETHOD,ui->le_Param_CalcMethod->text());
    m_pSettinsObj->SetParam(AMPPARAM,ui->le_Param_Amp->text());

    m_pSettinsObj->SaveAllSettingsInfoToFile();
    QMessageBox::information(this,"提示","保存成功",QMessageBox::Ok);

    emit m_pSettinsObj->emitSettingChange();

}
