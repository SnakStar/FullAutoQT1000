/*******************************************************************
 *  Copyright(c) 2000-2020 Company Name
 *  All rights reserved.
 *
 *  文件名称: TestInterface.h
 *  简要描述: 测试界面头文件，进行对象声明
 *
 *  创建日期: 2018-4-24
 *  作者: HuaT
 *  说明: 建立测试界面框架，界面使用命名规则为：控件类型_所属界面对象_对象名称
 *
 *  修改日期:
 *  作者:
 *  说明:
 ******************************************************************/

#ifndef TESTINTERFACE_H
#define TESTINTERFACE_H

#include <QtDebug>
#include <QDialog>
#include <QDebug>
#include <QStringList>
#include <QMessageBox>
#include <QRadioButton>
#include <QVector>
#include <QMap>
#include <QTimer>
#include <QDateTime>
#include <QTextBrowser>
#include "CommandStructDef.h"
#include "CommonDef.h"
#include "circlelayout.h"
#include "qextserial/qextserialport.h"
#include "cutilsettings.h"
#include "cqtprodb.h"
#include "ResultStructDef.h"
#include "resualcalc/resultcalc.h"
#include "cutilsettings.h"

#include "logoutput.h"

#define TABLE_ROWS_COUNT    16
#define TABLE_COLUMN_COUNT  3

#define TESTTIME            20

#define LOGPATH "/home/root/FullAutoQT/FullAutoLog.txt"

//#define SERIALDEBUG
enum LogTextColor{GRAY,GREED,RED,YELLOW,MAGENTA};
//enum LogTextColor{NOTE,NORMAL,ERROR,WARNING,NOTE};

#define STARTTEST    "本次测试开始,共%1例样本"
#define RUNADDSAMPLE "样本 %1 开始进行加样"
#define RUNCHECKING  "样本 %1 时间到,开始进行检测"
#define ENDTEST      "本轮测试已经完成"

#define CHECKSTATUS    "rgb(0,0,255)"
#define WAITSTATUS     "rgb(255,0,0)"
#define COMPLETESTATUS "rgb(0,255,0)"
#define NORMALSTATUS   "rgb(128,128,128)"

//急诊编号
#define EMER_No             16

namespace Ui {
class TestInterface;
}

class TestInterface : public QDialog
{
    Q_OBJECT
    
public:
    explicit TestInterface(QWidget *parent = 0);
    ~TestInterface();
public:
    QMap<QString,QString> GetTestItems();
public:
    bool eventFilter(QObject *obj, QEvent *e);
private slots:
    //接收检测板串口数据
    void RecvCheckPanelsData();
    //接收控制板串口数据
    void RecvControlPanelsData();
    //倒计时函数
    void CountDown();
    //测试板自检函数
    void TestCheckFunc();
    //控制板自检函数
    void ControlCheckFunc();
    //扫码模式改变
    void ScanModeChange();
private slots:
    void on_pb_Test_NewTest_clicked();

    void on_pb_Test_Back_clicked();

    void on_pb_Test_DetailsInfo_clicked();

    void on_pb_Test_StartTest_clicked();

    void on_pb_Test_ScanModel_clicked();

    void on_pb_Test_TestName1_clicked();

    void on_pb_Test_TestName2_clicked();

    void on_pb_Test_TestName3_clicked();

    void on_pb_Test_TestName4_clicked();

    void on_checkBox_Test_AllSelect_clicked();

    void on_pb_Test_One_clicked();

    void on_pb_Test_Two_clicked();

    void on_pb_Test_Three_clicked();

    void on_pb_Test_Four_clicked();

    void on_pb_Test_Five_clicked();

    void on_pb_Test_Six_clicked();

    void on_pb_Test_Seven_clicked();

    void on_pb_Test_Eight_clicked();

    void on_pb_Test_Nine_clicked();

    void on_pb_Test_Clear_clicked();

    void on_pb_Test_Zero_clicked();

    void on_pb_Test_OK_clicked();

    void on_pb_Test_ClearTestName_clicked();

    void on_tw_Test_TestInfo_cellClicked(int row, int column);

    void on_checkBox_Test_Emergency_clicked(bool checked);

    void on_pb_Test_InsertEmer_clicked();

    void on_pb_Test_ViewLog_clicked();

    void on_pb_Test_LogView_clicked();

    void on_pb_Test_LogDelete_clicked();

    void on_pb_Test_LogBack_clicked();
private:
    void ShowLogText(QTextBrowser *tb, QString strContent, int ColorType=1);

private:
    //解析串口数据
    bool ParseSerialData(const QByteArray& Data);
    //解析条码数据
    void ParseScanBarCodeInfo(const QByteArray &ScanData, bool bEmer=false);
    //显示条码信息
    void ShowBarCodeInfo(QList<SampleObj> listSampleInfo);
    //解析加样数据
    bool ParseLoadSampleInfo(const QByteArray &SampleData, quint32& SamplePos, quint32& TestPos);
    //处理加样完成
    void ProceStartLoadSample(const QByteArray& SampleData);
    //处理倒计时事件
    void ProceCountDownEvent(quint8 nReagentIndex, quint8 nSamplePos);
    //处理加样完成
    void PorceLoadSampleComplete(const QByteArray& AckData);
    //解析测试板返回的ACK
    void ParseCheckPanelsAck(const QByteArray& AckData);
    //解析控制板返回的ACK
    void ParseControlPanelsAck(const QByteArray& AckData);
    //解析测试结果数据
    bool ParseTestResultData(const QByteArray& AckData);
    QString CalcResult(RawTestInfo &TestInfoObj, QByteArray byarrResultData, QByteArray byarrIDCardData);
    //解析控制板报警数据
    void ParseControlPanelsAlarmData(const QByteArray& AlarmData);
    //开始卸卡
    void StartUnstallCard(const QByteArray& AckData);
    //所有测试完成
    void AllTestComplete();
    //检测所有测试是否完成
    bool CheckTestComplete();
    //所有加样完成
    void AllAddSampleComplete();
    //解析ID卡数据
    void ParseIDCardData(const QByteArray& AckData);
    //获取ID卡指定位置数据
    bool GetIDCardPosData(QByteArray byarrIDCardData,quint16 DataPos, quint8& nResult);
    //获取指定ID卡数据
    bool GetIDCardPosData(QString strIDCardIndex,QByteArray& byarrData);
    //调试信息输出
    void DebugOutput(quint16 nFuncIndex, QByteArray byarrContentData, QString type);

private:
    //测试函数
    QByteArray StrToBytes(QString str);
    //随机结果
    QString RandomResult(QString SampleNo);
private:
    //初始化检测板串口
    bool InitCheckPanelsSerial();
    //初始化控制板串口
    bool InitControlPanelsSerial();
    //初始化测试界面圆参数
    void InitCircle();
    //初始化扫码模式
    void InitScanMode();
    //默认测试界面圆颜色
    void DefaultCircleUI();
    //默认样品圆颜色
    void DefaultSampleCircleUI();
    //默认测试圆颜色
    void DefaultTestCircleUI();
    //初始化进度条控件
    void InitProgressBar();
    //初始化列表信息控件
    void InitTableInfo();
    //显示或者隐藏测试项目
    void ShowTestItem(bool isShow);
    //初始化当前可测试的项目
    void InitValidTestItem();
    //清除列表控件中的内容
    void ClearTableInfo();
    //初始化测试数据
    void InitVectorTestInfo();
    //发送串口数据
    void SendSerialData(QextSerialPort &ser, quint16 nFuncIndex, QByteArray arrData=QByteArray(""));
    //发送下一个样本加样命令
    void SendWaitAddSampleOrder();
    //
    void SendWaitCheckOrder();

private:
    // 清除指定单元格内容
    void ClearCellContent(int Column, int Row);
    // 设置指定单元格内容
    void SetCellContent(int Column, int Row, QString strContent);
    //项目名称转化
    QString TransformProjectName(QString strCurName,QString strNameRecord);
    //响应指定按钮项目名称
    void ResponseProjectButton(QPushButton* butObj, int nReagentIndex);
    //设置测试时信息页的编辑按钮状态
    void SetRuntimeButtonEnable(bool isTrue);
    //设置样本编辑按钮状态
    void SetSampleEditButtonEnable(bool isTrue);
    //设置测试中各个按钮状态
    void SetTestStatus(bool isTrue);
    //设置行颜色
    void SetRowColor(QColor color, quint8 nRow);
    //获取校验和
    quint32 GetCheckSum(QByteArray byarrDataLength,QByteArray byarrData);
    //整形转字节型
    QByteArray IntToBytes(quint32 nValue,quint8 nCount=4);
    //字节形转整型
    quint32 BytesToInt(QByteArray byarr);
    //测试完成
    //void TestComplete();
    //检测用户项目输入
    bool CheckUserInputValid();
    //添加单个测试项目信息到主结构体
    void AddSampleTestItemInfo(quint8 nSamplePos,QString strItemName,QList<SampleObj> &listSampleInfo);
    //更新ID卡数量信息
    bool UpdateIDCardInfo(quint32 nIDCardPos, quint8 nIDCardAmount);
    bool UpdateIDCardInfo(quint32 nIDCardPos, quint8 nIDCardAmount, QString strTestItem);
    //填充有效的消息结构体
    bool FillValidSerialData(QByteArray SerailData, MsgData& CurrData);
    //打包所有等待测试的项目到队列中
    void PacketTestInfoToQueue(QList<SampleObj> &listSampleInfo);
    //void PacketTestInfoToQueue(QMap<int,QList<SampleObj> > mapSampleInfo);
    void PacketTestInfoToQueue(QList<SampleObj> &vecSampleInfo, bool isEmer);
    //获取等待加样队列中一条等待测试项目
    QByteArray GetWaitAddSampleInfoToQueue();
    //获取等待检测队列中一条测试项目
    QByteArray GetWaitCheckInfoToQueue();
    //发送开始测试命令给仪器
    //QByteArray PacketTestInfoToByarr(QVector<SampleObj> &vecSampleInfo);
    //QByteArray PacketTestInfoToByarr(QVector<SampleObj> &vecSampleInfo,bool isEmer);
    //解析卸卡数据
    void ParseUnstallCardData();
    //保存结果到数据库
    bool SaveResultToDB(SampleObj so,quint32 nTestPos);
    //更新测试信息基本参数
    void UpdateTestInfoBaseParam(quint8 nCompeletCount);
    //获取等待测试总数
    int GetWaitTestCount();
    //打包测试数据为字节数据,以便发送到仪器串口
    QByteArray PackageTestDataToSerial(RawTestInfo TestInfo, QByteArray byteTestData);
    //
    QByteArray ValueToHex(QString strValue, quint8 nHexTotal, quint8 nDecimal);

private:
    //检测板串口数据
    QByteArray    m_byarrCheckData;
    //控制板串口数据
    QByteArray    m_byarrControlData;
    //测试圆
    CircleLayout* m_TestCircle;
    //样品圆
    CircleLayout* m_SampleCircle;
    //仪器检测板串口对象
    QextSerialPort m_CheckPanelsSerial;
    //仪器控制板串口对象
    QextSerialPort m_ControlPanelsSerial;
    //PC端串对象
    QextSerialPort* m_ConnPCSerial;
    //仪器数据
    QByteArray     m_DeviceData;
    //测试信息
    QList<SampleObj> m_listSampleInfo;
    //测试信息-map版本
    //QList<SampleObj> m_listSampleInfo;
    //测试项目位置
    QMap<QString,QString> m_mapTestItemPos;
    //ID卡数据
    QMap<QString,IDCardInfo> m_mapIDCardInfo;
    //配置文件对象
    CUtilSettings*  m_settins;
    //数据库对象
    CQtProDB*       m_Devdb;
    //完成测试总数
    quint8          m_nCompleteTestCount;
    //测试板自检计时器
    QTimer          m_TimerTestCheck;
    //控制板自检计时器
    QTimer          m_TimerControlCheck;
    //开机卸卡对象
    QByteArray      m_byarrUnstallCard;
    //是否为自检状态
    bool            m_bIsCheckStatus;
    //主界面指针
    QWidget*        m_pMainWnd;
    //结果计算对象
    ResultCalc      m_ResultCalc;
    //日志对象
    LogOutput       m_LogObj;
    //等待加样队列
    QList<SendQueue> m_listWaitAddSampleQueue;
    //等待测试队列
    QList<SendQueue> m_listWaitTestQueue;
    //输入法对象
    //MyInputPanelContext* m_myInputPanel;
//状态属性
private:
    //急诊状态
    bool            m_bEmerStatus;
    //开始测试状态
    //bool            m_bTestStatus;
    //检测时间状态
    bool            m_bCheckStatus;
    //加样状态
    bool            m_bAddSampleStatus;
    //调试参数调试
    bool            m_bDebugMode;
    //电脑连接状态
    bool            m_bConnectPC;
private:
    Ui::TestInterface *ui;
};

#endif // TESTINTERFACE_H
