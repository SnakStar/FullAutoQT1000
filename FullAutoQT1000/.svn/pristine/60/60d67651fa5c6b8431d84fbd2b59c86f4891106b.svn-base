/*******************************************************************
 *  Copyright(c) 2000-2020 Company Name
 *  All rights reserved.
 *
 *  文件名称: CUtilSettings.cpp
 *  简要描述: 配置文件类实现文件，实现对INI文件的增加、读取和修改
 *
 *  创建日期: 2016-6-5
 *  作者: HuaT
 *  说明:
 *
 *  修改日期:
 *  作者:
 *  说明:
 ******************************************************************/
#include "cutilsettings.h"

CUtilSettings::CUtilSettings(QObject *parent) :
    QObject(parent)
{
    //m_CurrentPath = QDir::currentPath();
    //m_IniFilePath = m_CurrentPath + "/Set/Setup.ini";
    m_IniFilePath = "/home/root/qt200/Set/Setup.ini";
    if(!CheckFileExist()){
        DefaultSettings();
    }else{
        ReadSettingsInfoToMap();
    }
}

CUtilSettings::CUtilSettings(const QMap<QString, QString> map,QString strInitPath)
{
    m_mapParam = map;
    m_IniFilePath = strInitPath;

    if(!CheckFileExist()){
        DefaultSettings();
    }else{
        ReadSettingsInfoToMap();
    }
}

CUtilSettings::CUtilSettings(const QList<QString> list, QString strInitPath){
    for(int n=0; n<list.size(); n++){
        m_mapParam[list.at(n)] = "";
    }
    m_IniFilePath = strInitPath;

    if(!CheckFileExist()){
        DefaultSettings();
    }else{
        ReadSettingsInfoToMap();
    }
}

/********************************************************
 *@Name:        ReadSettings
 *@Author:      HuaT
 *@Description: 按给定的键，获得默认路径的配置文件中对应键的值
 *@Param1:      需要获取值的键名
 *@Param2:      默认值获取的值，当获取指定的键名失败时，会将此值返回
 *@Return:      获取对应键值成功时，则返回对应的键值，失败则返回参数2
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
QVariant CUtilSettings::ReadSettings(const QString& key, const QVariant& defaultValue)
{
    QSettings settings(m_IniFilePath,QSettings::IniFormat);
    return settings.value(key,defaultValue);
}

/********************************************************
 *@Name:        SaveSettingsInfo
 *@Author:      HuaT
 *@Description: 按给定的键值对，写入默认路径的配置文件中
 *@Param1:      参数的键
 *@Param2:      参数的值
 *@Return:      无
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
void CUtilSettings::SaveSettingsInfo(const QString &key, const QVariant& value)
{
    QSettings settings(m_IniFilePath,QSettings::IniFormat);
    settings.setValue(key,value);
}

/********************************************************
 *@Name:        DefaultSettings
 *@Author:      HuaT
 *@Description: 当程序配置文件不存在或者丢失时，自动新建文件并初始化内容
 *              打印模式（0:手动打印，1:自动打印）
 *              Lis模式（0:无，1:ASTM，2:HL7）
 *              语言设置（0:中文，1:英文）
 *              通道设置（0:通道1，1:通道2，2:通道3）
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2016-6-5
********************************************************/
void CUtilSettings::DefaultSettings()
{
    QSettings settings(m_IniFilePath,QSettings::IniFormat);
    QMap<QString,QString>::iterator it;
    for(it = m_mapParam.begin(); it != m_mapParam.end(); it++){
        settings.setValue(it.key(),it.value());
    }
}

/********************************************************
 *@Name:        GetIniFilePath
 *@Author:      HuaT
 *@Description: 获取配置文件的路径
 *@Param:       无
 *@Return:      返回记录数据的配置文件路径
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
QString CUtilSettings::GetIniFilePath()
{
    return m_IniFilePath;
}

void CUtilSettings::SetIniFilePath(QString strPath)
{
    m_IniFilePath = strPath;
}

/********************************************************
 *@Name:        CheckFileExist
 *@Author:      HuaT
 *@Description: 检测配置文件是否存在
 *@Param:       无
 *@Return:      配置文件存在返回真，不在则返回假
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
bool CUtilSettings::CheckFileExist()
{
    QFile iniFile(m_IniFilePath);
    //qDebug()<<m_IniFilePath;
    if(iniFile.exists()){
        return true;
    }else{
        return false;
    }
}

/********************************************************
 *@Name:        ReadSettingsInfoToMap
 *@Author:      HuaT
 *@Description: 读取配置文件信息到参数表中
 *@Param:       无
 *@Return:      返回参数表对象
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
QMap<QString,QString> CUtilSettings::ReadSettingsInfoToMap()
{
    QSettings settings(m_IniFilePath,QSettings::IniFormat);
    QMap<QString,QString>::iterator it;
    for(it = m_mapParam.begin(); it != m_mapParam.end(); it++){
        m_mapParam[it.key()] = settings.value( it.key(),"" ).toString();
    }
    return m_mapParam;
}

/********************************************************
 *@Name:        SaveAllSettingsInfoToFile
 *@Author:      HuaT
 *@Description: 将Map映射中的数据写入到配置文件中
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2016-6-7
********************************************************/
void CUtilSettings::SaveAllSettingsInfoToFile()
{
    QSettings settings(m_IniFilePath,QSettings::IniFormat);
    QMap<QString,QString>::const_iterator it;
    for(it = m_mapParam.constBegin(); it != m_mapParam.constEnd(); it++){
        settings.setValue(it.key(),it.value());
    }
}

/********************************************************
 *@Name:        GetSettingsMap
 *@Author:      HuaT
 *@Description: 返回配置文件信息参数表对象
 *@Param:       无
 *@Return:      返回参数表对象
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
QMap<QString,QString> *CUtilSettings::GetSettingsMap()
{
    return &m_mapParam;
}

/********************************************************
 *@Name:        SetParam
 *@Author:      HuaT
 *@Description: 设置配置文件信息参数对应的键值
 *@Param1:      需要设置的键名
 *@Param2:      需要设置的值
 *@Return:      无
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
void CUtilSettings::SetParam(const QString &key, const QString &value)
{
    m_mapParam[key] = value;
}

/********************************************************
 *@Name:        GetParam
 *@Author:      HuaT
 *@Description: 获取配置文件信息参数对应的键值
 *@Param1:      需要获取的键名
 *@Return:      指定键名的值
 *@Version:     1.0
 *@Date:        2016-5-13
********************************************************/
QString CUtilSettings::GetParam(const QString &key)
{
    QString ss = m_mapParam.value(key,"");
    return m_mapParam.value(key,"");
}


void CUtilSettings::emitPrintSettingChange()
{
    emit PrintSettingChange();
}

void CUtilSettings::emitSettingChange()
{
    emit SettingChange();
}

/********************************************************
 *@Name:        Utf8ToGbk
 *@Author:      HuaT
 *@Description: UTF8编码格式转GBK编码格式
 *@Param:       UTF8编码字符串
 *@Return:      Gbk编码字符串内码
 *@Version:     1.0
 *@Date:        2016-6-20
********************************************************/
QByteArray CUtilSettings::Utf8ToGbk(QString str)
{
    QTextCodec *gbk = QTextCodec::codecForName("gb2312");
    QTextCodec *utf8 = QTextCodec::codecForName("utf8");
    QTextCodec::setCodecForTr(gbk);
    QTextCodec::setCodecForLocale(gbk);
    QTextCodec::setCodecForCStrings(gbk);
    QByteArray byteGbk;
    byteGbk.append(gbk->toUnicode(str.toLocal8Bit()));
    QTextCodec::setCodecForTr(utf8);
    QTextCodec::setCodecForLocale(utf8);
    QTextCodec::setCodecForCStrings(utf8);
    return byteGbk;
}
