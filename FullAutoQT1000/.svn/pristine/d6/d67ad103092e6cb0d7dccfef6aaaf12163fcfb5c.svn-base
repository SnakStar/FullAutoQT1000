/*******************************************************************
 *  Copyright(c) 2000-2020 Company Name
 *  All rights reserved.
 *
 *  文件名称: mainwindow.cpp
 *  简要描述: 主框架实现文件，进行主框架功能实现
 *
 *  创建日期: 2018-4-20
 *  作者: HuaT
 *  说明:
 *
 *  修改日期:
 *  作者:
 *  说明:
 ******************************************************************/

#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    this->setWindowIcon(QIcon(":/res/image/Title.png"));
    //设置指定宽高
    this->setFixedSize(this->width(),this->height());
    //连接数据库
    //m_devdb = new CQtProDB();
    m_devdb.ConnectDB("/home/root/FullAutoQT//autodb.db");
    //初始化配置文件
    InitSettinsParam();
    QString strSettinsFilePath = "/home/root/FullAutoQT//Set/Setup.ini";
    m_settings = new CUtilSettings(m_mapSetParam,strSettinsFilePath);
    //开机调试模式自动关闭
    m_settings->SetParam(DEBUGMODE,"0");
    m_settings->SetParam(CONNPCMODE,"0");
    m_settings->SetParam(TESTCARDMODE,"0");
    //打印串口初始化
    InitPrintSerial();
    connect(&m_SerialPrint,SIGNAL(readyRead()), this, SLOT(RecvPrintSerialData()));
    //HL7串口初始化
    InitHl7Serial();
    //更新时间
    m_timerSysTime.singleShot(1,this,SLOT(UpdateSystemTime()) );
    connect(&m_timerSysTime,SIGNAL(timeout()), this,SLOT(UpdateSystemTime()) );
    m_timerSysTime.start(1000);
    //初始化主界面
    InitMainInterface();
    connect(this,SIGNAL(SendShutdownDev()), m_TestInterface,SLOT(RecvShutdownOprt()) );
    //
    if(m_settings->GetParam(AUTOLOGIN).toInt() == 0){
        m_LoginDlg = new LoginDlg(&m_devdb);
        m_LoginDlg->setAttribute(Qt::WA_DeleteOnClose);
        m_LoginDlg->show();
        m_LoginDlg->move(this->pos().x(),this->pos().y());
        connect(m_LoginDlg,SIGNAL(loginSendShutodwnDev()), m_TestInterface, SLOT( RecvShutdownOprt()) );
    }
    QFile fi(":/res/qss/MainStyle.qss");
    if(fi.open(QIODevice::ReadOnly)){
        QTextStream ts(&fi);
        QString strStyle = ts.readAll();
        this->setStyleSheet(strStyle);
        fi.close();
    }
}


/********************************************************
 *@Name:        ~MainWindow
 *@Author:      HuaT
 *@Description: 主框架析构函数
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
MainWindow::~MainWindow()
{
    delete ui;
}

/********************************************************
 *@Name:        GetDatabaseObj
 *@Author:      HuaT
 *@Description: 获取数据库对象
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
CQtProDB* MainWindow::GetDatabaseObj()
{
    return &m_devdb;
}

/********************************************************
 *@Name:        RecvPrintSerialData
 *@Author:      HuaT
 *@Description: 解析打印串口数据
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2016-9-12
********************************************************/
void MainWindow::RecvPrintSerialData()
{
    QByteArray PrintData;
    PrintData.append(m_SerialPrint.readAll());
    //qDebug()<<PrintData.toHex().toUpper();
    if(0x04 == (int)PrintData.at(0)){
        //qDebug()<<"ok";
        QString strTitle = QObject::tr("Note");
        QString strContent = QObject::tr("printer is out of paper");
        QMessageBox::warning(this,strTitle,strContent,QMessageBox::Ok);
    }
    //原始数据测试使用
    //emit MockTest(PrintData);
}

/********************************************************
 *@Name:        GetSettingsObj
 *@Author:      HuaT
 *@Description: 获取数据库对象
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
CUtilSettings *MainWindow::GetSettingsObj()
{
    return m_settings;
}

/********************************************************
 *@Name:        SetCheckStatusHide
 *@Author:      HuaT
 *@Description: 设置自检提示信息是否隐藏
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
void MainWindow::SetCheckStatusHide(bool isHide)
{
    if(isHide){
        ui->lb_Main_NoteTitle->hide();
    }
}

/********************************************************
 *@Name:        GetPrintSerialPort
 *@Author:      HuaT
 *@Description: 获取打印串口对象
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
QextSerialPort *MainWindow::GetPrintSerialPort()
{
    return &m_SerialPrint;
}

/********************************************************
 *@Name:        GetHL7SerialPort
 *@Author:      HuaT
 *@Description: 获取HL7串口对象
 *@Param:       无
 *@Return:      返回HL7串口对象
 *@Version:     1.0
 *@Date:        2017-2-13
********************************************************/
QextSerialPort *MainWindow::GetHL7SerialPort()
{
    return &m_SerialHL7;
}

QextSerialPort *MainWindow::GetCheckPanelsSerial()
{
    return &m_CheckPanelsSerial;
}

QextSerialPort *MainWindow::GetControlPanelsSerial()
{
    return &m_ControlPanelsSerial;
}

/********************************************************
 *@Name:        InitPrintSerial
 *@Author:      HuaT
 *@Description: 初始化打印串口
 *@Param:       无
 *@Return:      打开打印串口是否成功
 *@Version:     1.0
 *@Date:        2016-9-1
********************************************************/
bool MainWindow::InitPrintSerial()
{
    //串口初始化
    m_SerialPrint.setBaudRate(BAUD9600);
#ifdef Q_OS_WIN32
    m_SerialPrint.setPortName("\\\\.\\com7");
#else
    m_SerialPrint.setPortName("/dev/ttyO2");
#endif
    bool bOpen = m_SerialPrint.open(QIODevice::ReadWrite);
    if(!bOpen){
        qDebug()<<"Print Serial open the fail";
    }
    return bOpen;
}

bool MainWindow::InitHl7Serial()
{
    //串口初始化
    m_SerialHL7.setBaudRate(BAUD115200);
#ifdef Q_OS_WIN32
    m_SerialHL7.setPortName("\\\\.\\com5");
#else
    m_SerialHL7.setPortName("/dev/ttyO0");
#endif
    bool bOpen = m_SerialHL7.open(QIODevice::ReadWrite);
    if(!bOpen){
        qDebug()<<"HL7 Serial open the fail";
    }
    return bOpen;
}

/*
 *
 *初始化检测板串口
 */
/////////////////////////////////////////////////////////
bool MainWindow::InitCheckPanelsSerial()
{
    //串口初始化
    m_CheckPanelsSerial.setBaudRate(BAUD19200);
#ifdef Q_OS_WIN32
    #ifndef SERIALDEBUG
        m_CheckPanelsSerial.setPortName("\\\\.\\com1");
    //m_CheckPanelsSerial.setTimeout(1000);
    #else
        m_CheckPanelsSerial.setPortName("\\\\.\\com1");
    #endif
#else
    m_CheckPanelsSerial.setPortName("/dev/ttyO1");
#endif
    bool bOpen = m_CheckPanelsSerial.open(QIODevice::ReadWrite);
    if(!bOpen){
        qDebug()<<"CheckPanels Serial open the fail";
    }
    return bOpen;
}

/*
 *
 *初始化控制板串口
 */
bool MainWindow::InitControlPanelsSerial()
{
    //串口初始化
    m_ControlPanelsSerial.setBaudRate(BAUD19200);
#ifdef Q_OS_WIN32
    #ifndef SERIALDEBUG
        m_ControlPanelsSerial.setPortName("\\\\.\\com3");
    #else
        m_ControlPanelsSerial.setPortName("\\\\.\\com3");
    #endif
#else
    m_ControlPanelsSerial.setPortName("/dev/ttyO4");
#endif
    bool bOpen = m_ControlPanelsSerial.open(QIODevice::ReadWrite);
    if(!bOpen){
        qDebug()<<"ControlPanels Serial open the fail";
    }
    return bOpen;

}


/********************************************************
 *@Name:        UpdateSystemTime
 *@Author:      HuaT
 *@Description: 更新系统时间
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
void MainWindow::UpdateSystemTime()
{
    QString strDateTime = QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss");
    ui->lb_Main_SystemTime->setText(strDateTime);

}

/********************************************************
 *@Name:        InitMainInterface
 *@Author:      HuaT
 *@Description: 初始化主界面相关控件
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
void MainWindow::InitMainInterface()
{
    m_TestInterface = new TestInterface(this);
    m_QueryInterface = new QueryInterface(this);
    m_QCInterface    = new QCInterface(this);
    m_SetInterface   = new SetInterface(this);
    ui->stackedWidget->addWidget(m_TestInterface);
    ui->stackedWidget->addWidget(m_QueryInterface);
    ui->stackedWidget->addWidget(m_QCInterface);
    ui->stackedWidget->addWidget(m_SetInterface);

    ui->stackedWidget->setCurrentIndex(0);
    ui->pb_Main_Test->setChecked(true);
    ui->pb_Main_Test->setIcon(QIcon(":/res/image/Main/MainTest-White.png"));
    ui->pb_Main_Test->setIconSize(QSize(32,32));
    ui->pb_Main_Query->setChecked(false);
    ui->pb_Main_Query->setIcon(QIcon(":/res/image/Main/MainQuery.png"));
    ui->pb_Main_Query->setIconSize(QSize(32,32));
    ui->pb_Main_QC->setChecked(false);
    ui->pb_Main_QC->setIcon(QIcon(":/res/image/Main/MainQC.png"));
    ui->pb_Main_QC->setIconSize(QSize(32,32));
    ui->pb_Main_Setting->setChecked(false);
    ui->pb_Main_Setting->setIcon(QIcon(":/res/image/Main/MainSetting.png"));
    ui->pb_Main_Setting->setIconSize(QSize(32,32));
}

/********************************************************
 *@Name:        InitSettinsParam
 *@Author:      HuaT
 *@Description: 初始化配置界面参数,key,value(默认值)
 *@Param:       无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
void MainWindow::InitSettinsParam()
{
    m_mapSetParam.insert(SCANMODE,"0");
    m_mapSetParam.insert(AUTOLOGIN,"0");
    m_mapSetParam.insert(LISMODE,"0");
    //m_mapSetParam.insert(BLOODTYPE,"0");
    m_mapSetParam.insert(DEBUGMODE,"0");
    m_mapSetParam.insert(CONNPCMODE,"0");
    m_mapSetParam.insert(TESTCARDMODE,"0");
    m_mapSetParam.insert(LOGDEBUGMODE,"0");
    m_mapSetParam.insert(DEBUGAMPPARAM,"0");
    m_mapSetParam.insert(DEBUGSCANSTART,"0");
    m_mapSetParam.insert(SAMPLESIZE,"0");
    m_mapSetParam.insert(DILUENT,"0");
    m_mapSetParam.insert(DEBUGCALCMETHOD,"0");
    m_mapSetParam.insert(DEBUGTESTTIME,"0");

    m_mapSetParam.insert(SAMPLEOFFSETCOEFF,"0");
    m_mapSetParam.insert(SAMPLEOFFSETCONST,"0");
    m_mapSetParam.insert(DILUENTOFFSETCOEFF,"0");
    m_mapSetParam.insert(DILUENTOFFSETCONST,"0");
    m_mapSetParam.insert(RESULTRATIOCOEFF,"0");
    m_mapSetParam.insert(RESULTRATIOCONSTA,"0");
    //硬件参数
    //吸样位
    m_mapSetParam.insert(DEBUGHWARMSAMPLEAddX,"0");
    m_mapSetParam.insert(DEBUGHWARMSAMPLEAddY,"0");
    //混匀位
    m_mapSetParam.insert(DEBUGHWARMMIXINGX,"0");
    m_mapSetParam.insert(DEBUGHWARMMIXINGY,"0");
    m_mapSetParam.insert(DEBUGHWARMMIXINGDEPTH,"0");
    //清洗位
    m_mapSetParam.insert(DEBUGHWARMCLEAREOUTX,"0");
    m_mapSetParam.insert(DEBUGHWARMCLEAREOUTY,"0");
    //缓冲液位
    m_mapSetParam.insert(DEBUGHWARMBUFFERX,"0");
    m_mapSetParam.insert(DEBUGHWARMBUFFERY,"0");
    m_mapSetParam.insert(DEBUGHWARMBUFFERDEPTH,"0");
    m_mapSetParam.insert(DEBUGHWARMBUFFEROFFSET,"0");
    //吸样位
    m_mapSetParam.insert(DEBUGHWARMSUCTIONX,"0");
    m_mapSetParam.insert(DEBUGHWARMSUCTIONY,"0");
    m_mapSetParam.insert(DEBUGHWARMSUCTIONDEPTH,"0");
    m_mapSetParam.insert(DEBUGHWARMSUCTIONOFFSET,"0");
    //当前加样臂位置
    m_mapSetParam.insert(DEBUGHWARMCURRENTPOSX,"0");
    m_mapSetParam.insert(DEBUGHWARMCURRENTPOSX,"0");


}

/********************************************************
 *@Name:        GetTestInterface
 *@Author:      HuaT
 *@Description: 获取测试界面对象
 *@Param:       无
 *@Return:      测试界面指针地址
 *@Version:     1.0
 *@Date:        2018-4-20
 ********************************************************/
TestInterface *MainWindow::GetTestInterface()
{
    return m_TestInterface;
}


/*
 *测试响应事件
 */
void MainWindow::on_pb_Main_Test_clicked()
{
    ui->stackedWidget->setCurrentWidget(m_TestInterface);

    ui->pb_Main_Test->setChecked(true);
    ui->pb_Main_Test->setIcon(QIcon(":/res/image/Main/MainTest-White.png"));
    ui->pb_Main_Query->setChecked(false);
    ui->pb_Main_Query->setIcon(QIcon(":/res/image/Main/MainQuery.png"));
    ui->pb_Main_QC->setChecked(false);
    ui->pb_Main_QC->setIcon(QIcon(":/res/image/Main/MainQC.png"));
    ui->pb_Main_Setting->setChecked(false);
    ui->pb_Main_Setting->setIcon(QIcon(":/res/image/Main/MainSetting.png"));
}

/*
 *查询响应事件
 */
void MainWindow::on_pb_Main_Query_clicked()
{
    ui->stackedWidget->setCurrentWidget(m_QueryInterface);

    ui->pb_Main_Test->setChecked(false);
    ui->pb_Main_Test->setIcon(QIcon(":/res/image/Main/MainTest.png"));
    ui->pb_Main_Query->setChecked(true);
    ui->pb_Main_Query->setIcon(QIcon(":/res/image/Main/MainQuery-White.png"));
    ui->pb_Main_QC->setChecked(false);
    ui->pb_Main_QC->setIcon(QIcon(":/res/image/Main/MainQC.png"));
    ui->pb_Main_Setting->setChecked(false);
    ui->pb_Main_Setting->setIcon(QIcon(":/res/image/Main/MainSetting.png"));
}

/*
 *质控响应事件
 */
void MainWindow::on_pb_Main_QC_clicked()
{
    ui->pb_Main_Test->setChecked(false);
    ui->pb_Main_Test->setIcon(QIcon(":/res/image/Main/MainTest.png"));
    ui->pb_Main_Query->setChecked(false);
    ui->pb_Main_Query->setIcon(QIcon(":/res/image/Main/MainQuery.png"));
    ui->pb_Main_QC->setChecked(true);
    ui->pb_Main_QC->setIcon(QIcon(":/res/image/Main/MainQC-White.png"));
    ui->pb_Main_Setting->setChecked(false);
    ui->pb_Main_Setting->setIcon(QIcon(":/res/image/Main/MainSetting.png"));
    ui->stackedWidget->setCurrentIndex(2);
}

/*
 *设置响应事件
 */
void MainWindow::on_pb_Main_Setting_clicked()
{
    ui->pb_Main_Test->setChecked(false);
    ui->pb_Main_Test->setIcon(QIcon(":/res/image/Main/MainTest.png"));
    ui->pb_Main_Query->setChecked(false);
    ui->pb_Main_Query->setIcon(QIcon(":/res/image/Main/MainQuery.png"));
    ui->pb_Main_QC->setChecked(false);
    ui->pb_Main_QC->setIcon(QIcon(":/res/image/Main/MainQC.png"));
    ui->pb_Main_Setting->setChecked(true);
    ui->pb_Main_Setting->setIcon(QIcon(":/res/image/Main/MainSetting-White.png"));
    ui->stackedWidget->setCurrentIndex(3);
    m_SetInterface->UpdateDbToRenf();
}

/*
 *关机响应事件
 */
void MainWindow::on_pb_Main_PowerOff_clicked()
{
    QString strTitle,strContent;
    strTitle = QObject::tr("警告");
    strContent = QObject::tr("您确定关闭仪器吗？");
    MsgBoxDlg msgBox;
    msgBox.ShowMsg(strContent,1);
    if(1 == msgBox.exec()){
        emit SendShutdownDev();
    }
    //qApp->exit(0);
    //QString strCmd = "shutdown -h now";
    //QProcess::execute(strCmd);
}
