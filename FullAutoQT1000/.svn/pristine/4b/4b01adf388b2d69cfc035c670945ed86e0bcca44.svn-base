#include "queryinterface.h"
#include "ui_queryinterface.h"
#include "mainwindow.h"

QueryInterface::QueryInterface(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::QueryInterface)
{
    ui->setupUi(this);
    //
    m_pMainWnd = parent;
    m_Devdb = static_cast<MainWindow*>(m_pMainWnd)->GetDatabaseObj();
    //打印串口对象
    m_SerialPrint = static_cast<MainWindow*>(m_pMainWnd)->GetPrintSerialPort();
    //HL7协议输出对象
    m_SerialHL7 = static_cast<MainWindow*>(m_pMainWnd)->GetHL7SerialPort();
    //初始化查询列表
    InitQueryTable();
    //初始化时间控件
    InitDateControl();
}

QueryInterface::~QueryInterface()
{
    delete ui;
}

/********************************************************
 *@Name:        InitQueryTable
 *@Author:      HuaT
 *@Description: 初始化查询列表字段信息
 *@Param1:      无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-6-29
********************************************************/
void QueryInterface::InitQueryTable()
{
    QStringList listHeader;
    listHeader<<QObject::tr("样本编号")<<QObject::tr("测试项目")<<QObject::tr("结果")
                <<QObject::tr("测试时间")<<QObject::tr("参考值");

    ui->tw_Query_QueryInfo->setColumnCount(listHeader.size());
    ui->tw_Query_QueryInfo->setRowCount(RESULT_ROW_COUNT);

    ui->tw_Query_QueryInfo->setHorizontalHeaderLabels(listHeader);
    ui->tw_Query_QueryInfo->setEditTriggers(QTableWidget::NoEditTriggers);
    ui->tw_Query_QueryInfo->setSelectionBehavior(QTableWidget::SelectRows);

    ui->tw_Query_QueryInfo->setColumnWidth(0,200);
    ui->tw_Query_QueryInfo->setColumnWidth(1,200);
    ui->tw_Query_QueryInfo->setColumnWidth(2,150);
    ui->tw_Query_QueryInfo->setColumnWidth(3,180);
    ui->tw_Query_QueryInfo->horizontalHeader()->setStretchLastSection(true);

    ui->tw_Query_QueryInfo->verticalHeader()->setDefaultSectionSize(42);
}

/********************************************************
 *@Name:        InitDateControl
 *@Author:      HuaT
 *@Description: 初始化日期控件
 *@Param1:      无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-6-29
********************************************************/
void QueryInterface::InitDateControl()
{
    QDate dateCur = QDate::currentDate();
    ui->de_Query_DateStart->setDate(dateCur);
    ui->de_Query_DateEnd->setDate(dateCur);
}

/********************************************************
 *@Name:        PrintChineseData
 *@Author:      HuaT
 *@Description: 打印中文数据
 *@Param1:      无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-6-29
********************************************************/
void QueryInterface::PrintChineseData(QextSerialPort *SerialPort, QString strName, QString strNumber, QString strAge, QString strSex, QString strItem, QString strResult, QString strCheckTime, QString strRenfValue, QString strFlag)
{
    QByteArray bytecmd;
    bytecmd[0] = 0x1B;
    bytecmd[1] = 0x61;
    bytecmd[2] = 0x01;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x1D;
    bytecmd[1] = 0x21;
    bytecmd[2] = 0x01;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    //SerialPort->write("Hospital");
    bytecmd[0] = 0x0A;
    SerialPort->write(Utf8ToGbk("检测报告单"));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x1B;
    bytecmd[1] = 0x61;
    bytecmd[2] = 0x00;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x1D;
    bytecmd[1] = 0x21;
    bytecmd[2] = 0x00;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    QString str;
    str = QString("姓名:%1          编号:%2").arg(strName).arg(strNumber);
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    str = QString("年龄:%1          性别:%2").arg(strAge).arg(strSex);
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x1D;
    bytecmd[1] = 0x21;
    bytecmd[2] = 0x01;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    SerialPort->write("--------------------------------");
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x1D;
    bytecmd[1] = 0x21;
    bytecmd[2] = 0x00;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    str = QString("项目: %1").arg(strItem);
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    //str = QString("样本类型: 全血");
    //bytecmd.append(Utf8ToGbk(str));
    //SerialPort->write(bytecmd);
    //bytecmd.clear();
    //bytecmd[0] = 0x0A;
    //SerialPort->write(bytecmd);
    //bytecmd.clear();
    str = QString("检测结果:");
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();

    //hsCRP+CRP为多行结果
    //QStringList strlistResultUnit = ParseTestUnit(strResult);
    /*if(strItem.compare("hsCRP+CRP") == 0){
        QString strValue = strlistResultUnit.at(0);
        if(strValue.indexOf('>') != -1 ){
            str = QString("hsCRP: >5mg/L");
            SerialPort->write(Utf8ToGbk(str));
            bytecmd[0] = 0x0A;
            SerialPort->write(bytecmd);
            bytecmd.clear();

            str = QString("%1: %2 %3").arg("CRP").arg(strResult).arg(strFlag);
            SerialPort->write(Utf8ToGbk(str));
            bytecmd[0] = 0x0A;
            SerialPort->write(bytecmd);
            bytecmd.clear();
        }else if(strValue.indexOf('<') != -1){
            str = QString("%1: %2 %3").arg("hsCRP").arg(strResult).arg(strFlag);
            SerialPort->write(Utf8ToGbk(str));
            bytecmd[0] = 0x0A;
            SerialPort->write(bytecmd);
            bytecmd.clear();

            str = QString("CRP: <5mg/L");
            SerialPort->write(Utf8ToGbk(str));
            bytecmd[0] = 0x0A;
            SerialPort->write(bytecmd);
            bytecmd.clear();
        }else{
            if(strlistResultUnit.at(0).toFloat() <= 5){
                str = QString("%1: %2 %3").arg("hsCRP").arg(strResult).arg(strFlag);
                SerialPort->write(Utf8ToGbk(str));
                bytecmd[0] = 0x0A;
                SerialPort->write(bytecmd);
                bytecmd.clear();

                str = QString("CRP: <5mg/L");
                SerialPort->write(Utf8ToGbk(str));
                bytecmd[0] = 0x0A;
                SerialPort->write(bytecmd);
                bytecmd.clear();
            }else{
                str = QString("hsCRP: >5mg/L");
                SerialPort->write(Utf8ToGbk(str));
                bytecmd[0] = 0x0A;
                SerialPort->write(bytecmd);
                bytecmd.clear();

                str = QString("%1: %2 %3").arg("CRP").arg(strResult).arg(strFlag);
                SerialPort->write(Utf8ToGbk(str));
                bytecmd[0] = 0x0A;
                SerialPort->write(bytecmd);
                bytecmd.clear();
            }
        }
    }else{*/
        str = QString("%1: %2 %3").arg(strItem).arg(strResult).arg(strFlag);
        SerialPort->write(Utf8ToGbk(str));
        bytecmd[0] = 0x0A;
        SerialPort->write(bytecmd);
        bytecmd.clear();
    //}

    str = QString("参考值范围:");
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    QStringList listResult = ParseTestUnit(strResult);
    QString strUnit;
    if(listResult.size()>=2){
        strUnit = listResult.at(1);
        if(strRenfValue.isEmpty()){
            strUnit.clear();
        }
    }
    str = QString("%1: %2%3").arg(strItem).arg(strRenfValue).arg(strUnit);
    SerialPort->write(Utf8ToGbk(str));
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    str = QString("说明:");
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x1D;
    bytecmd[1] = 0x21;
    bytecmd[2] = 0x01;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    str = QString("--------------------------------");
    SerialPort->write(str.toAscii());
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x1D;
    bytecmd[1] = 0x21;
    bytecmd[2] = 0x00;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    str = QString("检验时间: %1").arg(strCheckTime);
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    str = QString("操作医生: ");
    bytecmd.append(Utf8ToGbk(str));
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
    bytecmd[0] = 0x0A;
    SerialPort->write(bytecmd);
    bytecmd.clear();
}

/********************************************************
 *@Name:        Utf8ToGbk
 *@Author:      HuaT
 *@Description: UTF8编码格式转GBK编码格式
 *@Param:       UTF8编码字符串
 *@Return:      Gbk编码字符串内码
 *@Version:     1.0
 *@Date:        2016-6-20
********************************************************/
QByteArray QueryInterface::Utf8ToGbk(QString str)
{
    QTextCodec *gbk = QTextCodec::codecForName("gb2312");
    QTextCodec *utf8 = QTextCodec::codecForName("utf8");
    QTextCodec::setCodecForTr(gbk);
    QTextCodec::setCodecForLocale(gbk);
    QTextCodec::setCodecForCStrings(gbk);
    QByteArray byteGbk;
    byteGbk.append(gbk->toUnicode(str.toLocal8Bit()));
    QTextCodec::setCodecForTr(utf8);
    QTextCodec::setCodecForLocale(utf8);
    QTextCodec::setCodecForCStrings(utf8);
    return byteGbk;
}

/********************************************************
 *@Name:        ParseTestUnit
 *@Author:      HuaT
 *@Description: 把结果和单位分离并返回
 *@Param:       带结果单位的字符串
 *@Return:      返回结果和单位的字符链表
 *@Version:     1.0
 *@Date:        2017-2-22
********************************************************/
QStringList QueryInterface::ParseTestUnit(QString strResult)
{
    QStringList listResult;
    quint8 nAsc;
    for(int n=0; n<strResult.size(); n++){
        nAsc = (quint8)strResult.at(n).toAscii();
        //如果不是数字了,则就是单位开始了
        if(nAsc > 62){
            listResult.append(strResult.left(n));
            listResult.append(strResult.right(strResult.size()-n));
        }
    }
    return listResult;
}


/********************************************************
 *@Name:        ShowQueryData
 *@Author:      HuaT
 *@Description: 显示指定查询按钮
 *@Param1:      无
 *@Return:      无
 *@Version:     1.0
 *@Date:        2018-6-29
********************************************************/
void QueryInterface::ShowQueryData(QStringList listData)
{
    ui->tw_Query_QueryInfo->setRowCount(0);
    int nCount = 0;
    for(int n=0; n<listData.size(); n+=6){
        nCount = ui->tw_Query_QueryInfo->rowCount();
        ui->tw_Query_QueryInfo->insertRow(nCount);
        //样本编号
        QTableWidgetItem* item1 = new QTableWidgetItem;
        item1->setText( listData.at(n) );
        item1->setTextAlignment(Qt::AlignCenter);
        ui->tw_Query_QueryInfo->setItem(nCount,0,item1);
        //测试项目
        QTableWidgetItem* item2 = new QTableWidgetItem;
        item2->setText( listData.at(n+1) );
        item2->setTextAlignment(Qt::AlignCenter);
        ui->tw_Query_QueryInfo->setItem(nCount,1,item2);
        //结果
        QTableWidgetItem* item3 = new QTableWidgetItem;
        item3->setText( listData.at(n+2) + listData.at(n+3) );
        item3->setTextAlignment(Qt::AlignCenter);
        ui->tw_Query_QueryInfo->setItem(nCount,2,item3);
        //测试时间
        QTableWidgetItem* item4 = new QTableWidgetItem;
        item4->setText( listData.at(n+4) );
        item4->setTextAlignment(Qt::AlignCenter);
        ui->tw_Query_QueryInfo->setItem(nCount,3,item4);
        //参考值
        QTableWidgetItem* item5 = new QTableWidgetItem;
        item5->setText( listData.at(n+5) );
        item5->setTextAlignment(Qt::AlignCenter);
        ui->tw_Query_QueryInfo->setItem(nCount,4,item5);
    }
}

/*
 *查询按钮事件
 */
void QueryInterface::on_pb_Query_Query_clicked()
{
    QString strStartDate = ui->de_Query_DateStart->date().toString("yyyy-MM-dd");
    QString strEndDate = ui->de_Query_DateEnd->date().toString("yyyy-MM-dd");
    QString strSql = QString("select number,item,result,unit,testdate,reference from patient where date(testdate) between '%1' and '%2' order by testdate desc").arg(strStartDate).arg(strEndDate);
    //qDebug()<<strSql;
    ShowQueryData(m_Devdb->ExecQuery(strSql));
}

/*
 * 打印按钮事件
 */
void QueryInterface::on_pb_Query_Print_clicked()
{
    int nCurrow = ui->tw_Query_QueryInfo->currentRow();
    if(nCurrow != -1){
        QString strNum = ui->tw_Query_QueryInfo->item(nCurrow,0)->text();
        QString strItem = ui->tw_Query_QueryInfo->item(nCurrow,1)->text();
        QString strResult = ui->tw_Query_QueryInfo->item(nCurrow,2)->text();
        QString strCheckTime = ui->tw_Query_QueryInfo->item(nCurrow,3)->text();
        PrintChineseData(m_SerialPrint,"",strNum,"","",strItem,strResult,strCheckTime,"","");
    }
}

/*
 * 回传按钮事件
 */
void QueryInterface::on_pb_Query_PassBack_clicked()
{
    int nCurrow = ui->tw_Query_QueryInfo->currentRow();
    if(nCurrow != -1){
        QString strNumber = ui->tw_Query_QueryInfo->item(nCurrow,0)->text();
        QString strName = "";
        QString strAge = "";
        QString strSex = "";
        QString strResult = ui->tw_Query_QueryInfo->item(nCurrow,2)->text();
        QString strUnit = "";
        QString strItem = ui->tw_Query_QueryInfo->item(nCurrow,1)->text();
        QString strTestDate = ui->tw_Query_QueryInfo->item(nCurrow,3)->text();
        QDateTime dtCheckTime = QDateTime::fromString(strTestDate,"yyyy-MM-dd hh:mm:ss");
        strTestDate = dtCheckTime.toString("yyyyMMddhhmmss");
        m_SimpleHL7.WriteHL7Msg(m_SerialHL7,strNumber,strName,strAge,strSex,strItem,strResult,
                                strUnit,strTestDate,"ORU^R01");
    }
}
